/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package engtelecom.std;

//import com.rabbitmq.client.*;
//import util.Conexao;
import org.json.JSONObject;

import java.io.IOException;
import java.net.URI;
import java.net.http.HttpClient;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.concurrent.Executors;
import java.util.concurrent.ScheduledExecutorService;
import java.util.concurrent.TimeUnit;
import java.nio.channels.Channel;
import java.sql.Connection;
import java.util.Map;
import java.util.concurrent.TimeUnit;
import java.util.concurrent.TimeoutException;
import java.util.function.Consumer;

import main.java.engtelecom.std.Device;

public class App {

    private static final HttpClient client = HttpClient.newHttpClient();
    private static final ScheduledExecutorService scheduler = Executors.newScheduledThreadPool(1);
    public static void main(String[] args) throws IOException, TimeoutException {

        if (args.length == 0) 
        {
            throw new IllegalArgumentException("No device type provided.");
        }
        
        Device device = createDevice(args[0]);
        sendPostRequestToDeviceApi(device);
        startScheduledUpdate(device);
    }

    private static Device createDevice(String type) {

        Device device;

        switch (type) {
            case "airconditioning":
                device = new Device(type, 16, 30); 
                device.setFunctionality("temperature", 22);
                device.setFunctionality("power", "off");
                break;
            case "curtain":
                device = new Device(type, 0, 100); 
                device.setFunctionality("open", 50);
                break;
            case "eletronicgate":
                device = new Device(type, 0, 100); 
                device.setFunctionality("open", "50");
                break;
            case "lightbulb":
                device = new Device(type, 0, 100); 
                device.setFunctionality("intensity", 50);
                device.setFunctionality("power", "off");
                break;
            case "soundsystem":
                device = new Device(type, 0, 100); 
                device.setFunctionality("volume", 30);
                device.setFunctionality("power", "off");
                break;
            case "television":
                device = new Device(type, 0, 100); 
                device.setFunctionality("volume", 30);
                device.setFunctionality("power", "off");
                break;
            default:
                throw new IllegalArgumentException("Unknown device type: " + type);
        }

        return device;
    }

   private static void sendPostRequestToDeviceApi(Device device) 
   {
        HttpClient client = HttpClient.newHttpClient();
        
        JSONObject json = new JSONObject();
        json.put("id", device.getId());
        json.put("type", device.getType());
        json.put("minValue", device.getMinValue());
        json.put("maxValue", device.getMaxValue());

        JSONObject functionalitiesJson = new JSONObject();
        for (Map.Entry<String, Object> entry : device.getFunctionalities().entrySet()) 
        {
            functionalitiesJson.put(entry.getKey(), entry.getValue());
        }
        json.put("functionalities", functionalitiesJson);

        HttpRequest request = HttpRequest.newBuilder()
            .uri(URI.create("http://automationcenter:8080/api/v1/device")) 
            .header("Content-Type", "application/json")
            .POST(HttpRequest.BodyPublishers.ofString(json.toString()))
            .build();

        try 
        {
            HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
            System.out.println("Response status code: " + response.statusCode());
            System.out.println("Response body: " + response.body());
        } 
        catch (IOException | InterruptedException e) 
        {
            e.printStackTrace();
        }
    }

     private static void startScheduledUpdate(Device device) 
     {
        final Runnable updater = () -> 
        {
            try 
            {    
                HttpRequest request = HttpRequest.newBuilder()
                    .uri(URI.create("http://automationcenter:8080/api/v1/devices/" + device.getId()))
                    .GET()
                    .build();
        
                HttpResponse<String> response = client.send(request, HttpResponse.BodyHandlers.ofString());
                if (response.statusCode() == 200) 
                {
                    updateDeviceFromApiResponse(device, response.body());
                } 
                else 
                {
                    System.out.println("Failed to fetch device functionalities: " + response.body());
                }
            } 
            catch (IOException | InterruptedException e) 
            {
                e.printStackTrace();
            }
        };

        scheduler.scheduleAtFixedRate(updater, 0, 15, TimeUnit.SECONDS);
    }

    private static void updateDeviceFromApiResponse(Device device, String responseBody) 
    {
        JSONObject json = new JSONObject(responseBody);
        JSONObject functionalitiesJson = json.getJSONObject("functionalities");

        for (String key : functionalitiesJson.keySet()) 
        {
            device.setFunctionality(key, functionalitiesJson.get(key));
        }

        System.out.println("Device functionaliyties updated from API response:");
        for (Map.Entry<String, Object> entry : device.getFunctionalities().entrySet()) 
        {
            System.out.println(entry.getKey() + ": " + entry.getValue());
        }
    }
}